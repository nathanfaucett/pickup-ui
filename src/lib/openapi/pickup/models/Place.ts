/* tslint:disable */
/* eslint-disable */
/**
 * Pickup API
 * Pickup API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PlaceFeature } from './PlaceFeature';
import {
    PlaceFeatureFromJSON,
    PlaceFeatureFromJSONTyped,
    PlaceFeatureToJSON,
} from './PlaceFeature';

/**
 * 
 * @export
 * @interface Place
 */
export interface Place {
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    country: string;
    /**
     * 
     * @type {Date}
     * @memberof Place
     */
    created_at: Date;
    /**
     * 
     * @type {number}
     * @memberof Place
     */
    creator_id: number;
    /**
     * 
     * @type {Array<PlaceFeature>}
     * @memberof Place
     */
    features: Array<PlaceFeature>;
    /**
     * 
     * @type {number}
     * @memberof Place
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof Place
     */
    latitude: number;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    locality: string;
    /**
     * 
     * @type {number}
     * @memberof Place
     */
    longitude: number;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    postal_code: string;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    region: string;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    street_address_line1: string;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    street_address_line2: string;
    /**
     * 
     * @type {Date}
     * @memberof Place
     */
    updated_at: Date;
}

/**
 * Check if a given object implements the Place interface.
 */
export function instanceOfPlace(value: object): boolean {
    if (!('country' in value)) return false;
    if (!('created_at' in value)) return false;
    if (!('creator_id' in value)) return false;
    if (!('features' in value)) return false;
    if (!('id' in value)) return false;
    if (!('latitude' in value)) return false;
    if (!('locality' in value)) return false;
    if (!('longitude' in value)) return false;
    if (!('name' in value)) return false;
    if (!('postal_code' in value)) return false;
    if (!('region' in value)) return false;
    if (!('street_address_line1' in value)) return false;
    if (!('street_address_line2' in value)) return false;
    if (!('updated_at' in value)) return false;
    return true;
}

export function PlaceFromJSON(json: any): Place {
    return PlaceFromJSONTyped(json, false);
}

export function PlaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Place {
    if (json == null) {
        return json;
    }
    return {
        
        'country': json['country'],
        'created_at': (new Date(json['created_at'])),
        'creator_id': json['creator_id'],
        'features': ((json['features'] as Array<any>).map(PlaceFeatureFromJSON)),
        'id': json['id'],
        'latitude': json['latitude'],
        'locality': json['locality'],
        'longitude': json['longitude'],
        'name': json['name'],
        'postal_code': json['postal_code'],
        'region': json['region'],
        'street_address_line1': json['street_address_line1'],
        'street_address_line2': json['street_address_line2'],
        'updated_at': (new Date(json['updated_at'])),
    };
}

export function PlaceToJSON(value?: Place | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'country': value['country'],
        'created_at': ((value['created_at']).toISOString()),
        'creator_id': value['creator_id'],
        'features': ((value['features'] as Array<any>).map(PlaceFeatureToJSON)),
        'id': value['id'],
        'latitude': value['latitude'],
        'locality': value['locality'],
        'longitude': value['longitude'],
        'name': value['name'],
        'postal_code': value['postal_code'],
        'region': value['region'],
        'street_address_line1': value['street_address_line1'],
        'street_address_line2': value['street_address_line2'],
        'updated_at': ((value['updated_at']).toISOString()),
    };
}

