/* tslint:disable */
/* eslint-disable */
/**
 * Pickup API
 * Pickup API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface Oauth2ProviderCallbackGetRequest {
    provider: string;
    state: string;
    code: string;
}

export interface Oauth2ProviderGetRequest {
    provider: string;
}

/**
 * Oauth2Api - interface
 * 
 * @export
 * @interface Oauth2ApiInterface
 */
export interface Oauth2ApiInterface {
    /**
     * 
     * @summary Redirects with provider\'s token
     * @param {string} provider provider
     * @param {string} state state
     * @param {string} code code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    oauth2ProviderCallbackGetRaw(requestParameters: Oauth2ProviderCallbackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Redirects with provider\'s token
     */
    oauth2ProviderCallbackGet(provider: string, state: string, code: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Redirect to provider
     * @param {string} provider Provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    oauth2ProviderGetRaw(requestParameters: Oauth2ProviderGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Redirect to provider
     */
    oauth2ProviderGet(provider: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class Oauth2Api extends runtime.BaseAPI implements Oauth2ApiInterface {

    /**
     * Redirects with provider\'s token
     */
    async oauth2ProviderCallbackGetRaw(requestParameters: Oauth2ProviderCallbackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling oauth2ProviderCallbackGet().'
            );
        }

        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling oauth2ProviderCallbackGet().'
            );
        }

        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling oauth2ProviderCallbackGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth2/{provider}/callback`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))).replace(`{${"state"}}`, encodeURIComponent(String(requestParameters['state']))).replace(`{${"code"}}`, encodeURIComponent(String(requestParameters['code']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Redirects with provider\'s token
     */
    async oauth2ProviderCallbackGet(provider: string, state: string, code: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oauth2ProviderCallbackGetRaw({ provider: provider, state: state, code: code }, initOverrides);
    }

    /**
     * Redirect to provider
     */
    async oauth2ProviderGetRaw(requestParameters: Oauth2ProviderGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling oauth2ProviderGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth2/{provider}`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Redirect to provider
     */
    async oauth2ProviderGet(provider: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oauth2ProviderGetRaw({ provider: provider }, initOverrides);
    }

}
