/* tslint:disable */
/* eslint-disable */
/**
 * Pickup API
 * Pickup API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Place,
} from '../models/index';
import {
    PlaceFromJSON,
    PlaceToJSON,
} from '../models/index';

export interface PlacesGetRequest {
    latitude: number;
    limit: number;
    longitude: number;
    maxDistance: number;
    offset: number;
    locationTypes?: Array<string>;
    types?: Array<string>;
}

/**
 * PlaceApi - interface
 * 
 * @export
 * @interface PlaceApiInterface
 */
export interface PlaceApiInterface {
    /**
     * 
     * @summary Get places
     * @param {number} latitude 
     * @param {number} limit 
     * @param {number} longitude 
     * @param {number} maxDistance 
     * @param {number} offset 
     * @param {Array<string>} [locationTypes] 
     * @param {Array<string>} [types] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaceApiInterface
     */
    placesGetRaw(requestParameters: PlacesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Place>>>;

    /**
     * Get places
     */
    placesGet(latitude: number, limit: number, longitude: number, maxDistance: number, offset: number, locationTypes?: Array<string>, types?: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Place>>;

}

/**
 * 
 */
export class PlaceApi extends runtime.BaseAPI implements PlaceApiInterface {

    /**
     * Get places
     */
    async placesGetRaw(requestParameters: PlacesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Place>>> {
        if (requestParameters['latitude'] == null) {
            throw new runtime.RequiredError(
                'latitude',
                'Required parameter "latitude" was null or undefined when calling placesGet().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling placesGet().'
            );
        }

        if (requestParameters['longitude'] == null) {
            throw new runtime.RequiredError(
                'longitude',
                'Required parameter "longitude" was null or undefined when calling placesGet().'
            );
        }

        if (requestParameters['maxDistance'] == null) {
            throw new runtime.RequiredError(
                'maxDistance',
                'Required parameter "maxDistance" was null or undefined when calling placesGet().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling placesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['latitude'] != null) {
            queryParameters['latitude'] = requestParameters['latitude'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['locationTypes'] != null) {
            queryParameters['locationTypes'] = requestParameters['locationTypes']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['longitude'] != null) {
            queryParameters['longitude'] = requestParameters['longitude'];
        }

        if (requestParameters['maxDistance'] != null) {
            queryParameters['maxDistance'] = requestParameters['maxDistance'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['types'] != null) {
            queryParameters['types'] = requestParameters['types']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/places`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaceFromJSON));
    }

    /**
     * Get places
     */
    async placesGet(latitude: number, limit: number, longitude: number, maxDistance: number, offset: number, locationTypes?: Array<string>, types?: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Place>> {
        const response = await this.placesGetRaw({ latitude: latitude, limit: limit, longitude: longitude, maxDistance: maxDistance, offset: offset, locationTypes: locationTypes, types: types }, initOverrides);
        return await response.value();
    }

}
